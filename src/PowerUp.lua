---
--- Generated by Luanalysis
--- Created by salvadorLemus.
--- DateTime: 09-May-2023 3:49 p.m.
---

--[[ Powerup class for LUA

Add a Powerup class to the game that spawns a powerup
 (images located at the bottom of the sprite sheet in the distribution code). 
 
 This Powerup should spawn randomly, be it on a timer or when the Ball
  hits a Block enough times, and gradually descend toward the player. 
  
  Once collided with the Paddle, two more Balls should spawn and behave
   identically to the original, including all collision and scoring points 
   for the player. Once the player wins and proceeds to the VictoryState 
   for their current level, the Balls should reset so that there is only one 
   active again.
]]

PowerUp = Class{}

function PowerUp:init(skin)
    -- simple positional and dimensional variables
    self.width = 8
    self.height = 8

    -- these variables are for keeping track of our velocity on both the
    -- X and Y axis, since the ball can move in two dimensions
    self.dy = math.random(50, 100)
    self.dx = 0

    self.x = VIRTUAL_WIDTH / 2
    -- y is placed a little above the bottom edge of the screen
    self.y = 0

    -- this will effectively be the color of our ball, and we will index
    -- our table of Quads relating to the global block texture using this
    self.skin = 0
    self.inPlay = false
end

--[[
    Expects an argument with a bounding box, be that a paddle or a brick,
    and returns true if the bounding boxes of this and the argument overlap.
]]
function PowerUp:collides(target)
    if(self.inPlay == false) then
        return false
    end
    -- first, check to see if the left edge of either is farther to the right
    -- than the right edge of the other
    if self.x > target.x + target.width or target.x > self.x + self.width then
        return false
    end

    -- then check to see if the bottom edge of either is higher than the top
    -- edge of the other
    if self.y > target.y + target.height or target.y > self.y + self.height then
        return false
    end

    -- if the above aren't true, they're overlapping
    return true
end

--[[
    Places the ball in the middle of the screen, with no movement.
]]
function PowerUp:reset()
    self.x = VIRTUAL_WIDTH / 2 - 2
    self.y = VIRTUAL_HEIGHT / 2
    self.dx = 0
    self.dy = math.random(50, 100)
end

function PowerUp:update(dt)
    
    if(self.inPlay == false) then
        return false
    end
    
    self.y = self.y + self.dy * dt
    
    -- Check if the ball is out of the screen
    if(self.y > VIRTUAL_HEIGHT) then
        self.inPlay = false
    end
end

function PowerUp:render()
    
    if(self.inPlay == false) then
        return false
    end
    
    -- gTexture is our global texture for all blocks
    -- gBallFrames is a table of quads mapping to each individual ball skin in the texture
    love.graphics.draw(gTextures['main'], gFrames['powerups'][self.skin],
            self.x, self.y)
end